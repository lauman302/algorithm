'''
Вот какую задачу Тимофей предложил на собеседовании одному из кандидатов. 
Если вы с ней ещё не сталкивались, то наверняка столкнётесь –— она довольно популярная.

Дана скобочная последовательность. Нужно определить, правильная ли она.

Будем придерживаться такого определения:

пустая строка —– правильная скобочная последовательность;
правильная скобочная последовательность, взятая в скобки одного типа, –— правильная скобочная последовательность;
правильная скобочная последовательность с приписанной слева или справа правильной скобочной 
последовательностью —– тоже правильная.
На вход подаётся последовательность из скобок трёх видов: [], (), {}.
Напишите функцию is_correct_bracket_seq, которая принимает на вход скобочную последовательность 
и возвращает True, если последовательность правильная, а иначе False.

Формат ввода
На вход подаётся одна строка, содержащая скобочную последовательность. 
Скобки записаны подряд, без пробелов.

Формат вывода
Выведите «True» или «False».

Пример 1
{[()]} = True

Пример 2
() = True

33
создаешь список с открывающими скобками '('  '['  '{'
20:33
создаешь пустой список ( стэк )
20:35
и запускаешь цикл, если есть открывающая скобка - кладешь в стэк, в противном случает если попадается скобка закрывающая 
И при этом стэк не пуст И при этом последняя [-1] соотвествует закрывающей - выкидываешь открывающую из стэка
20:36
в конце условие, если ничего не выполнилось то добавить в стэк
20:37
если к концу цикла стэк не пуст - то False

'''

from inspect import stack
from turtle import st


class Stack:
    def __init__(self):
        self.items = []

    def isEmpty(self):
        return self.items == []

    def push(self, item):
        self.items.append(item)

    def pop(self):
        del self.items[-1]

    def peek(self):
        return self.items[-1]


def is_correct_bracket_seq(line):
    brackets = {'(':')','{':'}','[':']'}
    for symbol in line:
        if symbol in brackets:
            stack.push(symbol)
        elif not stack.isEmpty() and brackets.get(stack.peek()) == symbol:
            stack.pop()
        else:
            stack.push(symbol)
            break
    return stack.items == []

if __name__ == '__main__':
    stack = Stack()
    line = input()
    print(is_correct_bracket_seq(line))

